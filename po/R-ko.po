# Korean translation for R nlme package
# Recommended/nlme/po/R-ko.po
# Maintainer: R Core Team <R-core@R-project.org>
# Sent to Brian Ripley <ripley@stats.ox.ac.uk>
# Copyright (C) 1995-2013 The R Core Team
# This file is distributed under the same license as the R nlme package.
# R Development Translation Team - Korean
# Chel Hee Lee <gnustats@korea.gnu.org>, 2013.
# Chel Hee Lee <gnustats@gmail.com>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: nlme 3.1-105\n"
"POT-Creation-Date: 2024-09-13 20:06\n"
"PO-Revision-Date: 2013-08-16 18:52-0600\n"
"Last-Translator: Chel Hee Lee <gnustats@gmail.com>\n"
"Language-Team: R Development Translation Teams (Korean) <gnustats@korea.gnu.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Poedit-SourceCharset: utf-8\n"
"X-Generator: Poedit 1.5.4\n"

#. R/corStruct.R: gettextf("\"corARMA\" order (%g, %g) exceeds maximum lag in data (%g)",     p, q, maxLag)
#: R/corStruct.R:0
msgid "\"corARMA\" order (%g, %g) exceeds maximum lag in data (%g)"
msgstr ""

#. R/corStruct.R: stop("\"corStruct\" object must have a \"fixed\" attribute")
#: R/corStruct.R:0
msgid "\"corStruct\" object must have a \"fixed\" attribute"
msgstr "\"corStruct\" 객체는 반드시 \"fixed\" 속성을 가지고 있어야 합니다"

#. R/reStruct.R: stop("\"pdMat\" element must have a formula")
#: R/reStruct.R:0
msgid "\"pdMat\" element must have a formula"
msgstr ""

#. R/reStruct.R: stop("\"pdMat\" elements must have a formula")
#: R/reStruct.R:0
msgid "\"pdMat\" elements must have a formula"
msgstr ""

#. R/gls.R: gettextf("%s and %s must have the same group levels", c1, c2)
#: R/gls.R:0
msgid "%s and %s must have the same group levels"
msgstr "%s와 %s은 반드시 같은 그룹 수준들을 가져야 합니다"

#. R/varFunc.R: gettextf("%s can have at most two components", nam)
#. R/varFunc.R: gettextf("%s can have at most two components", nam)
#: R/varFunc.R:0
msgid "%s can have at most two components"
msgstr ""

#. R/varFunc.R: gettextf("%s can only be a list or numeric", nam)
#. R/varFunc.R: gettextf("%s can only be a list or numeric", nam)
#: R/varFunc.R:0
msgid "%s can only be a list or numeric"
msgstr ""

#. R/varFunc.R: gettextf("%s can only have names \"const\" and \"power\"", nam)
#: R/varFunc.R:0
msgid "%s can only have names \"const\" and \"power\""
msgstr ""

#. R/varFunc.R: gettextf("%s can only have names \"const\" and \"prop\"", nam)
#: R/varFunc.R:0
msgid "%s can only have names \"const\" and \"prop\""
msgstr ""

#. R/lme.R: gettextf("%s is not a valid effect name", sQuote(reName))
#: R/lme.R:0
msgid "%s is not a valid effect name"
msgstr ""

#. R/pdMat.R: gettextf("%s is not a valid object for \"pdMat\"", sQuote(deparse(object)))
#: R/pdMat.R:0
msgid "%s is not a valid object for \"pdMat\""
msgstr ""

#. R/varFunc.R: gettextf("%s must have group names in 'varConstPower'", nam)
#: R/varFunc.R:0
msgid "%s must have group names in 'varConstPower'"
msgstr ""

#. R/varFunc.R: gettextf("%s must have group names in 'varConstProp'", nam)
#: R/varFunc.R:0
msgid "%s must have group names in 'varConstProp'"
msgstr ""

#. R/lme.R: gettextf("%s problem, convergence error code = %s\n  message = %s",     controlvals$opt, optRes$convergence, paste(optRes$message,         collapse = ""), domain = "R-nlme")
#: R/lme.R:0
msgid ""
"%s problem, convergence error code = %s\n"
"  message = %s"
msgstr ""

#. R/gls.R: gettextf("%s without \"primary\" can only be used with fits of \"groupedData\" objects",     sys.call()[[1L]])
#. R/lmList.R: gettextf("%s without \"primary\" can only be used with fits of \"groupedData\" objects",     sys.call()[[1]])
#. R/lme.R: gettextf("%s without \"primary\" can only be used with fits of \"groupedData\" objects",     sys.call()[[1L]])
#: R/gls.R:0 R/lmList.R:0 R/lme.R:0
msgid "%s without \"primary\" can only be used with fits of \"groupedData\" objects"
msgstr ""

#. R/newFunc.R: stop("'FUN' can only be a function or a list of functions")
#: R/newFunc.R:0
msgid "'FUN' can only be a function or a list of functions"
msgstr ""

#. R/lme.R: stop("'Id' must be between 0 and 1")
#: R/lme.R:0
msgid "'Id' must be between 0 and 1"
msgstr "'Id'는 반드시 0과 1 사이에 있어야 합니다"

#. R/gls.R: gettextf("'Terms' must be between 1 and %d", nTerms)
#. R/lme.R: gettextf("'Terms' must be between 1 and %d", nTerms)
#: R/gls.R:0 R/lme.R:0
msgid "'Terms' must be between 1 and %d"
msgstr "'Terms'는 반드시 1과 %d 사이에 있어야 합니다"

#. R/groupedData.R: stop("'asTable' can only be used with balanced 'groupedData' objects")
#: R/groupedData.R:0
msgid "'asTable' can only be used with balanced 'groupedData' objects"
msgstr ""

#. R/groupedData.R: stop("'asTable' cannot be used with multilevel grouped data")
#: R/groupedData.R:0
msgid "'asTable' cannot be used with multilevel grouped data"
msgstr ""

#. R/lmList.R: message("'data' argument not used, but taken from groupedData object")
#: R/lmList.R:0
msgid "'data' argument not used, but taken from groupedData object"
msgstr ""

#. R/lmList.R: gettextf("'data' in %s call must evaluate to a data frame", sQuote(substitute(object)))
#: R/lmList.R:0
msgid "'data' in %s call must evaluate to a data frame"
msgstr ""

#. R/nlsList.R: stop("'data' must be a \"groupedData\" object if 'formula' does not include groups")
#: R/nlsList.R:0
msgid "'data' must be a \"groupedData\" object if 'formula' does not include groups"
msgstr ""

#. R/lmList.R: stop("'data' must be a \"groupedData\" object if 'groups' argument is missing")
#: R/lmList.R:0
msgid "'data' must be a \"groupedData\" object if 'groups' argument is missing"
msgstr ""

#. R/gnls.R: stop("'data' must be given explicitly to use 'nls' to get initial estimates")
#: R/gnls.R:0
msgid "'data' must be given explicitly to use 'nls' to get initial estimates"
msgstr ""

#. R/nlme.R: stop("'data' must be given explicitly to use 'nlsList'")
#: R/nlme.R:0
msgid "'data' must be given explicitly to use 'nlsList'"
msgstr ""

#. R/simulate.R: stop("'data' must inherit from \"groupedData\" class if 'random' does not define groups")
#: R/simulate.R:0
msgid "'data' must inherit from \"groupedData\" class if 'random' does not define groups"
msgstr ""

#. R/newMethods.R: stop("'distance' and 'object' have incompatible lengths")
#: R/newMethods.R:0
msgid "'distance' and 'object' have incompatible lengths"
msgstr ""

#. R/nlme.R: stop("'fixed' must be a formula or list of formulae")
#: R/nlme.R:0
msgid "'fixed' must be a formula or list of formulae"
msgstr ""

#. R/pdMat.R: stop("'form' and 'nam' have incompatible lengths")
#: R/pdMat.R:0
msgid "'form' and 'nam' have incompatible lengths"
msgstr ""

#. R/pdMat.R: stop("'form' and 'pdClass' have incompatible lengths")
#: R/pdMat.R:0
msgid "'form' and 'pdClass' have incompatible lengths"
msgstr ""

#. R/newMethods.R: stop("'form' argument must be a formula")
#: R/newMethods.R:0
msgid "'form' argument must be a formula"
msgstr ""

#. R/pdMat.R: stop("'form' can only be a formula or a list of formulae")
#: R/pdMat.R:0
msgid "'form' can only be a formula or a list of formulae"
msgstr ""

#. R/newMethods.R: stop("'form' can only be a formula, or a list of formulas")
#: R/newMethods.R:0
msgid "'form' can only be a formula, or a list of formulas"
msgstr ""

#. R/lmList.R: stop("'form' must be a formula")
#. R/lmList.R: stop("'form' must be a formula")
#. R/lmList.R: stop("'form' must be a formula")
#. R/lme.R: stop("'form' must be a formula")
#. R/lme.R: stop("'form' must be a formula")
#. R/newFunc.R: stop("'form' must be a formula")
#. R/newFunc.R: stop("'form' must be a formula")
#. R/newMethods.R: stop("'form' must be a formula")
#. R/newMethods.R: stop("'form' must be a formula")
#. R/newMethods.R: stop("'form' must be a formula")
#: R/lmList.R:0 R/lme.R:0 R/newFunc.R:0 R/newMethods.R:0
msgid "'form' must be a formula"
msgstr "'form'은 반드시 formula 이어야 합니다"

#. R/lme.R: stop("'form' must be a formula when not NULL")
#: R/lme.R:0
msgid "'form' must be a formula when not NULL"
msgstr ""

#. R/pdMat.R: stop("'form' must be a list")
#: R/pdMat.R:0
msgid "'form' must be a list"
msgstr "'form'은 반드시 리스트이어야 합니다"

#. R/lmList.R: stop("'form' must be a one-sided formula")
#. R/lme.R: stop("'form' must be a one-sided formula")
#: R/lmList.R:0 R/lme.R:0
msgid "'form' must be a one-sided formula"
msgstr ""

#. R/newFunc.R: stop("'form' must be a two-sided formula")
#. R/newMethods.R: stop("'form' must be a two-sided formula")
#: R/newFunc.R:0 R/newMethods.R:0
msgid "'form' must be a two-sided formula"
msgstr ""

#. R/varFunc.R: stop("'form' must have a covariate")
#. R/varFunc.R: stop("'form' must have a covariate")
#. R/varFunc.R: stop("'form' must have a covariate")
#. R/varFunc.R: stop("'form' must have a covariate")
#. R/varFunc.R: stop("'form' must have a covariate")
#: R/varFunc.R:0
msgid "'form' must have a covariate"
msgstr ""

#. R/newMethods.R: stop("'form' must have all components as formulas")
#: R/newMethods.R:0
msgid "'form' must have all components as formulas"
msgstr ""

#. R/pdMat.R: stop("'form' not consistent with 'nam'")
#: R/pdMat.R:0
msgid "'form' not consistent with 'nam'"
msgstr ""

#. R/lmList.R: stop("'id' can only be a formula or numeric")
#. R/lmList.R: stop("'id' can only be a formula or numeric")
#. R/lmList.R: stop("'id' can only be a formula or numeric")
#. R/lmList.R: stop("'id' can only be a formula or numeric")
#. R/lme.R: stop("'id' can only be a formula or numeric")
#. R/lme.R: stop("'id' can only be a formula or numeric")
#. R/lme.R: stop("'id' can only be a formula or numeric")
#. R/newMethods.R: stop("'id' can only be a formula or numeric")
#. R/newMethods.R: stop("'id' can only be a formula or numeric")
#: R/lmList.R:0 R/lme.R:0 R/newMethods.R:0
msgid "'id' can only be a formula or numeric"
msgstr ""

#. R/lmList.R: stop("'id' must be between 0 and 1")
#. R/lmList.R: stop("'id' must be between 0 and 1")
#. R/lmList.R: stop("'id' must be between 0 and 1")
#. R/lmList.R: stop("'id' must be between 0 and 1")
#. R/lme.R: stop("'id' must be between 0 and 1")
#. R/lme.R: stop("'id' must be between 0 and 1")
#. R/newMethods.R: stop("'id' must be between 0 and 1")
#. R/newMethods.R: stop("'id' must be between 0 and 1")
#: R/lmList.R:0 R/lme.R:0 R/newMethods.R:0
msgid "'id' must be between 0 and 1"
msgstr "'id'는 반드시 0과 1 사이에 있어야 합니다"

#. R/lmList.R: stop("'idLabels' can only be a formula or a vector")
#. R/lmList.R: stop("'idLabels' can only be a formula or a vector")
#. R/lmList.R: stop("'idLabels' can only be a formula or a vector")
#. R/lmList.R: stop("'idLabels' can only be a formula or a vector")
#. R/lme.R: stop("'idLabels' can only be a formula or a vector")
#. R/lme.R: stop("'idLabels' can only be a formula or a vector")
#. R/lme.R: stop("'idLabels' can only be a formula or a vector")
#. R/newMethods.R: stop("'idLabels' can only be a formula or a vector")
#. R/newMethods.R: stop("'idLabels' can only be a formula or a vector")
#: R/lmList.R:0 R/lme.R:0 R/newMethods.R:0
msgid "'idLabels' can only be a formula or a vector"
msgstr ""

#. R/lmList.R: stop("'idLabels' of incorrect length")
#. R/lmList.R: stop("'idLabels' of incorrect length")
#. R/lmList.R: stop("'idLabels' of incorrect length")
#. R/lmList.R: stop("'idLabels' of incorrect length")
#. R/lme.R: stop("'idLabels' of incorrect length")
#. R/lme.R: stop("'idLabels' of incorrect length")
#. R/lme.R: stop("'idLabels' of incorrect length")
#. R/newMethods.R: stop("'idLabels' of incorrect length")
#. R/newMethods.R: stop("'idLabels' of incorrect length")
#: R/lmList.R:0 R/lme.R:0 R/newMethods.R:0
msgid "'idLabels' of incorrect length"
msgstr ""

#. R/lme.R: warning("'lme.lmList' will redefine 'data'")
#: R/lme.R:0
msgid "'lme.lmList' will redefine 'data'"
msgstr ""

#. R/nlme.R: stop("'model' must be a formula")
#: R/nlme.R:0
msgid "'model' must be a formula"
msgstr ""

#. R/pdMat.R: stop("'nam' and 'pdClass' have incompatible lengths")
#: R/pdMat.R:0
msgid "'nam' and 'pdClass' have incompatible lengths"
msgstr ""

#. R/pdMat.R: stop("'nam' must be a list")
#: R/pdMat.R:0
msgid "'nam' must be a list"
msgstr "'nam'은 반드시 리스트이어야 합니다"

#. R/gls.R: stop("'nint' is not consistent with 'breaks'")
#. R/lme.R: stop("'nint' is not consistent with 'breaks'")
#: R/gls.R:0 R/lme.R:0
msgid "'nint' is not consistent with 'breaks'"
msgstr ""

#. R/nlme.R: warning("'nlme.nlsList' will redefine 'fixed', 'data', and 'start'")
#: R/nlme.R:0
msgid "'nlme.nlsList' will redefine 'fixed', 'data', and 'start'"
msgstr ""

#. R/corStruct.R: stop("'object' has not been Initialize()d")
#. R/corStruct.R: stop("'object' has not been Initialize()d")
#. R/corStruct.R: stop("'object' has not been Initialize()d")
#. R/corStruct.R: stop("'object' has not been Initialize()d")
#: R/corStruct.R:0
msgid "'object' has not been Initialize()d"
msgstr "'object'가 초기화 되지 않았습니다"

#. R/gnls.R: stop("'object' must be a formula")
#: R/gnls.R:0
msgid "'object' must be a formula"
msgstr "'object'는 반드시 formula이어야 합니다"

#. R/reStruct.R: stop("'object' must be a list or a formula")
#: R/reStruct.R:0
msgid "'object' must be a list or a formula"
msgstr ""

#. R/pdMat.R: stop("'object' must be a list when not missing, not a matrix, and not numeric")
#: R/pdMat.R:0
msgid "'object' must be a list when not missing, not a matrix, and not numeric"
msgstr ""

#. R/gnls.R: stop("'params' must be a formula or list of formulae")
#: R/gnls.R:0
msgid "'params' must be a formula or list of formulae"
msgstr ""

#. R/pdMat.R: stop("'pdClass' must be a character vector")
#: R/pdMat.R:0
msgid "'pdClass' must be a character vector"
msgstr "'pdClass'는 반드시 문자형 벡터이어야 합니다"

#. R/groupedData.R: stop("'preserve' must be a two-sided formula")
#: R/groupedData.R:0
msgid "'preserve' must be a two-sided formula"
msgstr ""

#. R/nlme.R: stop("'random' must be a formula or list of formulae")
#: R/nlme.R:0
msgid "'random' must be a formula or list of formulae"
msgstr ""

#. R/corStruct.R: stop("'range' must be > 0 in \"corLin\" initial value")
#: R/corStruct.R:0
msgid "'range' must be > 0 in \"corLin\" initial value"
msgstr ""

#. R/corStruct.R: stop("'range' must be > 0 in \"corSpatial\" initial value")
#: R/corStruct.R:0
msgid "'range' must be > 0 in \"corSpatial\" initial value"
msgstr ""

#. R/nlme.R: stop("'start' must have a component called 'fixed'")
#: R/nlme.R:0
msgid "'start' must have a component called 'fixed'"
msgstr ""

#. R/lmList.R: stop("'subset' can only be character or integer")
#. R/lmList.R: stop("'subset' can only be character or integer")
#: R/lmList.R:0
msgid "'subset' can only be character or integer"
msgstr ""

#. R/groupedData.R: warning("'subset' ignored with single grouping factor")
#: R/groupedData.R:0
msgid "'subset' ignored with single grouping factor"
msgstr ""

#. R/groupedData.R: stop("'subset' must be a list")
#: R/groupedData.R:0
msgid "'subset' must be a list"
msgstr "'subset'은 반드시 리스트이어야 합니다"

#. R/corStruct.R: gettextf("'sumLenSq := sum(table(groups)^2)' = %g is too large.\n Too large or no groups in your correlation structure?",     suml2)
#: R/corStruct.R:0
msgid ""
"'sumLenSq := sum(table(groups)^2)' = %g is too large.\n"
" Too large or no groups in your correlation structure?"
msgstr ""

#. R/corStruct.R: gettextf("'sumLenSq' = %g is too large (larger than maximal integer)",     corD[["sumLenSq"]])
#: R/corStruct.R:0
msgid "'sumLenSq' = %g is too large (larger than maximal integer)"
msgstr ""

#. R/varFunc.R: stop("'value' must be a one sided formula")
#: R/varFunc.R:0
msgid "'value' must be a one sided formula"
msgstr ""

#. R/pdMat.R: stop("'value' must be a square matrix")
#: R/pdMat.R:0
msgid "'value' must be a square matrix"
msgstr ""

#. R/newFunc.R: stop("'which' can only be character or integer")
#: R/newFunc.R:0
msgid "'which' can only be character or integer"
msgstr ""

#. R/newFunc.R: gettextf("'which' must be between 1 and %d", ncol(object))
#: R/newFunc.R:0
msgid "'which' must be between 1 and %d"
msgstr "'which'는 반드시 1과 %d 사이에 있어야 합니다"

#. R/zzMethods.R: stop("AIC undefined for REML fit")
#: R/zzMethods.R:0
msgid "AIC undefined for REML fit"
msgstr ""

#. R/nlme.R: if (convIter >= control$iter.max) "Do increase 'msMaxIter'!" else if (!is.null(msg <- optRes$message)) paste("PORT message:",     msg)
#. R/nlme.R: if (aNlm$code == 4) "Do increase 'msMaxIter'!"
#: R/nlme.R:0
msgid "Do increase 'msMaxIter'!"
msgstr ""

#. R/nlme.R: sprintf("Iteration %d, LME step: nlm() did not converge (code = %d).",     numIter, aNlm$code)
#: R/nlme.R:0
msgid "Iteration %d, LME step: nlm() did not converge (code = %d)."
msgstr ""

#. R/nlme.R: sprintf("Iteration %d, LME step: nlminb() did not converge (code = %d).",     numIter, optRes$convergence)
#: R/nlme.R:0
msgid "Iteration %d, LME step: nlminb() did not converge (code = %d)."
msgstr ""

#. R/lme.R: stop("L may only involve fixed effects with the same denominator DF")
#: R/lme.R:0
msgid "L may only involve fixed effects with the same denominator DF"
msgstr ""

#. R/pdMat.R: stop("LNone of the arguments specify more than one block")
#: R/pdMat.R:0
msgid "LNone of the arguments specify more than one block"
msgstr ""

#. R/pdMat.R: gettextf("Length of names should be %d", aux)
#. R/pdMat.R: gettextf("Length of names should be %d", length(dn))
#: R/pdMat.R:0
msgid "Length of names should be %d"
msgstr ""

#. R/nlme.R: paste("PORT message:", msg)
#: R/nlme.R:0
msgid "PORT message:"
msgstr ""

#. R/gls.R: stop("Within-group std. dev. must be a positive numeric value")
#. R/gnls.R: stop("Within-group std. dev. must be a positive numeric value")
#. R/lme.R: stop("Within-group std. dev. must be a positive numeric value")
#. R/nlme.R: stop("Within-group std. dev. must be a positive numeric value")
#: R/gls.R:0 R/gnls.R:0 R/lme.R:0 R/nlme.R:0
msgid "Within-group std. dev. must be a positive numeric value"
msgstr ""

#. R/varFunc.R: stop("all arguments to 'varComb' must be of class \"varFunc\".")
#: R/varFunc.R:0
msgid "all arguments to 'varComb' must be of class \"varFunc\"."
msgstr ""

#. R/pdMat.R: stop("all elements in the argument must generate \"pdMat\" objects")
#: R/pdMat.R:0
msgid "all elements in the argument must generate \"pdMat\" objects"
msgstr ""

#. R/pdMat.R: stop("all elements must have a non-zero size")
#: R/pdMat.R:0
msgid "all elements must have a non-zero size"
msgstr ""

#. R/pdMat.R: stop("all elements must have formulas when any has a formula")
#: R/pdMat.R:0
msgid "all elements must have formulas when any has a formula"
msgstr ""

#. R/pdMat.R: stop("all elements must have names when any has names")
#: R/pdMat.R:0
msgid "all elements must have names when any has names"
msgstr ""

#. R/pdMat.R: stop("all elements of 'form' list must be two-sided formulas")
#: R/pdMat.R:0
msgid "all elements of 'form' list must be two-sided formulas"
msgstr ""

#. R/reStruct.R: stop("all elements of a \"reStruct\" object must have a non-zero size")
#: R/reStruct.R:0
msgid "all elements of a \"reStruct\" object must have a non-zero size"
msgstr ""

#. R/pdMat.R: stop("all elements of formula must be list of two-sided formulae or two-sided formulae")
#: R/pdMat.R:0
msgid "all elements of formula must be list of two-sided formulae or two-sided formulae"
msgstr ""

#. R/lme.R: stop("all fitted objects must have the same estimation method")
#: R/lme.R:0
msgid "all fitted objects must have the same estimation method"
msgstr "모든 객체들이 같은 추정방법을 이용하여 적합되어야 합니다"

#. R/lme.R: stop("all fitted objects must use the same number of observations")
#: R/lme.R:0
msgid "all fitted objects must use the same number of observations"
msgstr ""

#. R/varFunc.R: stop("all variables used in 'formula' must be in 'data'")
#: R/varFunc.R:0
msgid "all variables used in 'formula' must be in 'data'"
msgstr ""

#. R/pdMat.R: gettextf("an object of length %d does not match a Cholesky factor",     length(val))
#: R/pdMat.R:0
msgid "an object of length %d does not match a Cholesky factor"
msgstr ""

#. R/pdMat.R: gettextf("an object of length %d does not match the required parameter size",     length(val))
#. R/pdMat.R: gettextf("an object of length %d does not match the required parameter size",     length(val))
#. R/pdMat.R: gettextf("an object of length %d does not match the required parameter size",     length(val))
#. R/pdMat.R: gettextf("an object of length %d does not match the required parameter size",     length(val))
#. R/pdMat.R: gettextf("an object of length %d does not match the required parameter size",     length(val))
#: R/pdMat.R:0
msgid "an object of length %d does not match the required parameter size"
msgstr ""

#. R/pdMat.R: stop("arguments imply different number of blocks")
#: R/pdMat.R:0
msgid "arguments imply different number of blocks"
msgstr ""

#. R/corStruct.R: stop("at least one of 'p' and 'q' must be > 0")
#: R/corStruct.R:0
msgid "at least one of 'p' and 'q' must be > 0"
msgstr ""

#. R/newMethods.R: stop("at least two coefficients are needed")
#: R/newMethods.R:0
msgid "at least two coefficients are needed"
msgstr ""

#. R/lme.R: stop("augmentation of random effects only available for single level")
#: R/lme.R:0
msgid "augmentation of random effects only available for single level"
msgstr ""

#. R/corStruct.R: stop("autoregressive order must be a non-negative integer")
#: R/corStruct.R:0
msgid "autoregressive order must be a non-negative integer"
msgstr ""

#. R/varFunc.R: stop("can only construct \"varFunc\" object from another \"varFunc\" object, a formula, or a character string")
#: R/varFunc.R:0
msgid "can only construct \"varFunc\" object from another \"varFunc\" object, a formula, or a character string"
msgstr ""

#. R/lme.R: stop("can only fit \"lmList\" objects with single grouping variable")
#. R/lme.R: stop("can only fit \"lmList\" objects with single grouping variable")
#: R/lme.R:0
msgid "can only fit \"lmList\" objects with single grouping variable"
msgstr ""

#. R/nlme.R: stop("can only fit \"nlsList\" objects with single grouping variable")
#: R/nlme.R:0
msgid "can only fit \"nlsList\" objects with single grouping variable"
msgstr ""

#. R/pdMat.R: stop("cannot access the matrix of object without names")
#. R/pdMat.R: stop("cannot access the matrix of object without names")
#: R/pdMat.R:0
msgid "cannot access the matrix of object without names"
msgstr ""

#. R/pdMat.R: stop("cannot access the matrix of uninitialized objects")
#. R/pdMat.R: stop("cannot access the matrix of uninitialized objects")
#. R/pdMat.R: stop("cannot access the matrix of uninitialized objects")
#. R/pdMat.R: stop("cannot access the matrix of uninitialized objects")
#. R/reStruct.R: stop("cannot access the matrix of uninitialized objects")
#. R/reStruct.R: stop("cannot access the matrix of uninitialized objects")
#: R/pdMat.R:0 R/reStruct.R:0
msgid "cannot access the matrix of uninitialized objects"
msgstr ""

#. R/pdMat.R: stop("cannot access the number of columns of uninitialized objects without names")
#: R/pdMat.R:0
msgid "cannot access the number of columns of uninitialized objects without names"
msgstr ""

#. R/gnls.R: stop("cannot calculate REML log-likelihood for \"gnls\" objects")
#: R/gnls.R:0
msgid "cannot calculate REML log-likelihood for \"gnls\" objects"
msgstr ""

#. R/corStruct.R: warning("cannot change 'form'")
#: R/corStruct.R:0
msgid "cannot change 'form'"
msgstr "'form'를 변경할 수 없습니다"

#. R/varFunc.R: stop("cannot change coefficients before initialization or when all parameters are fixed")
#. R/varFunc.R: stop("cannot change coefficients before initialization or when all parameters are fixed")
#. R/varFunc.R: stop("cannot change coefficients before initialization or when all parameters are fixed")
#. R/varFunc.R: stop("cannot change coefficients before initialization or when all parameters are fixed")
#: R/varFunc.R:0
msgid "cannot change coefficients before initialization or when all parameters are fixed"
msgstr ""

#. R/pdMat.R: stop("cannot change dimensions on an initialized \"pdMat\" object")
#: R/pdMat.R:0
msgid "cannot change dimensions on an initialized \"pdMat\" object"
msgstr "초기화된 \"pdMat\" 객체의 차원정보를 변경할 수 없습니다"

#. R/pdMat.R: stop("cannot change parameter length of initialized \"pdMat\" object")
#: R/pdMat.R:0
msgid "cannot change parameter length of initialized \"pdMat\" object"
msgstr ""

#. R/varFunc.R: stop("cannot change parameter length of initialized \"varComb\" object")
#: R/varFunc.R:0
msgid "cannot change parameter length of initialized \"varComb\" object"
msgstr ""

#. R/reStruct.R: stop("cannot change parameter length of initialized objects")
#: R/reStruct.R:0
msgid "cannot change parameter length of initialized objects"
msgstr ""

#. R/reStruct.R: stop("cannot change the length of 'object'")
#: R/reStruct.R:0
msgid "cannot change the length of 'object'"
msgstr ""

#. R/varFunc.R: stop("cannot change the length of covariate in \"varFunc\" object")
#: R/varFunc.R:0
msgid "cannot change the length of covariate in \"varFunc\" object"
msgstr ""

#. R/varFunc.R: stop("cannot change the length of the \"varExp\" parameter after initialization")
#: R/varFunc.R:0
msgid "cannot change the length of the \"varExp\" parameter after initialization"
msgstr ""

#. R/varFunc.R: stop("cannot change the length of the \"varIdent\" parameter after initialization")
#: R/varFunc.R:0
msgid "cannot change the length of the \"varIdent\" parameter after initialization"
msgstr ""

#. R/varFunc.R: stop("cannot change the length of the \"varStruct\" parameter after initialization")
#: R/varFunc.R:0
msgid "cannot change the length of the \"varStruct\" parameter after initialization"
msgstr ""

#. R/corStruct.R: stop("cannot change the length of the parameter after initialization")
#. R/pdMat.R: stop("cannot change the length of the parameter after initialization")
#. R/varFunc.R: stop("cannot change the length of the parameter after initialization")
#. R/varFunc.R: stop("cannot change the length of the parameter after initialization")
#: R/corStruct.R:0 R/pdMat.R:0 R/varFunc.R:0
msgid "cannot change the length of the parameter after initialization"
msgstr "초기화 이후에는 파라미터의 길이를 변경할 수 없습니다"

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corAR1\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corAR1\" object"
msgstr "\"corAR1\" 객체의 파라미터의 길이를 변경할 수 없습니다"

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corARMA\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corARMA\" object"
msgstr ""

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corCAR1\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corCAR1\" object"
msgstr ""

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corCompSymm\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corCompSymm\" object"
msgstr "\"corCompSymm\" 객체의 파라미터의 길이를 변경할 수 없습니다"

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corNatural\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corNatural\" object"
msgstr "\"corNatural\" 객체의 파라미터의 길이를 변경할 수 없습니다"

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corStruct\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corStruct\" object"
msgstr "\"corStruct\" 객체의 파라미터의 길이를 변경할 수 없습니다"

#. R/corStruct.R: stop("cannot change the length of the parameter of a \"corSymm\" object")
#: R/corStruct.R:0
msgid "cannot change the length of the parameter of a \"corSymm\" object"
msgstr "\"corSymm\" 객체의 파라미터의 길이를 변경할 수 없습니다"

#. R/pdMat.R: stop("cannot change the number of columns on an initialized object")
#: R/pdMat.R:0
msgid "cannot change the number of columns on an initialized object"
msgstr ""

#. R/pdMat.R: stop("cannot change the parameter when length of parameters is undefined")
#. R/reStruct.R: stop("cannot change the parameter when length of parameters is undefined")
#: R/pdMat.R:0 R/reStruct.R:0
msgid "cannot change the parameter when length of parameters is undefined"
msgstr ""

#. R/lmList.R: stop("cannot do pairs of just one variable")
#. R/lme.R: stop("cannot do pairs of just one variable")
#: R/lmList.R:0 R/lme.R:0
msgid "cannot do pairs of just one variable"
msgstr ""

#. R/lme.R: stop("cannot evaluate groups for desired levels on 'newdata'")
#. R/nlme.R: stop("cannot evaluate groups for desired levels on 'newdata'")
#: R/lme.R:0 R/nlme.R:0
msgid "cannot evaluate groups for desired levels on 'newdata'"
msgstr ""

#. R/reStruct.R: stop("cannot extract groups formula without a formula")
#: R/reStruct.R:0
msgid "cannot extract groups formula without a formula"
msgstr ""

#. R/pdMat.R: stop("cannot extract matrix from an uninitialized object")
#. R/pdMat.R: stop("cannot extract matrix from an uninitialized object")
#: R/pdMat.R:0
msgid "cannot extract matrix from an uninitialized object"
msgstr ""

#. R/reStruct.R: stop("cannot extract model matrix without formula")
#: R/reStruct.R:0
msgid "cannot extract model matrix without formula"
msgstr ""

#. R/varFunc.R: stop("cannot extract parameters of uninitialized object")
#: R/varFunc.R:0
msgid "cannot extract parameters of uninitialized object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the dimensions")
#. R/pdMat.R: stop("cannot extract the dimensions")
#: R/pdMat.R:0
msgid "cannot extract the dimensions"
msgstr ""

#. R/pdMat.R: stop("cannot extract the inverse from an uninitialized object")
#. R/pdMat.R: stop("cannot extract the inverse from an uninitialized object")
#. R/pdMat.R: stop("cannot extract the inverse from an uninitialized object")
#: R/pdMat.R:0
msgid "cannot extract the inverse from an uninitialized object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the log of the determinant from an uninitialized object")
#. R/pdMat.R: stop("cannot extract the log of the determinant from an uninitialized object")
#. R/pdMat.R: stop("cannot extract the log of the determinant from an uninitialized object")
#. R/pdMat.R: stop("cannot extract the log of the determinant from an uninitialized object")
#: R/pdMat.R:0
msgid "cannot extract the log of the determinant from an uninitialized object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the matrix from an uninitialized \"pdCompSymm\" object")
#. R/pdMat.R: stop("cannot extract the matrix from an uninitialized \"pdCompSymm\" object")
#: R/pdMat.R:0
msgid "cannot extract the matrix from an uninitialized \"pdCompSymm\" object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the matrix from an uninitialized \"pdIdent\" object")
#. R/pdMat.R: stop("cannot extract the matrix from an uninitialized \"pdIdent\" object")
#: R/pdMat.R:0
msgid "cannot extract the matrix from an uninitialized \"pdIdent\" object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the matrix from an uninitialized object")
#: R/pdMat.R:0
msgid "cannot extract the matrix from an uninitialized object"
msgstr ""

#. R/pdMat.R: stop("cannot extract the matrix with uninitialized dimensions")
#. R/pdMat.R: stop("cannot extract the matrix with uninitialized dimensions")
#. R/pdMat.R: stop("cannot extract the matrix with uninitialized dimensions")
#. R/pdMat.R: stop("cannot extract the matrix with uninitialized dimensions")
#: R/pdMat.R:0
msgid "cannot extract the matrix with uninitialized dimensions"
msgstr ""

#. R/varFunc.R: stop("cannot fix variances in all groups")
#: R/varFunc.R:0
msgid "cannot fix variances in all groups"
msgstr ""

#. R/gls.R: gettextf("cannot get confidence intervals on var-cov components: %s",     aV)
#: R/gls.R:0
msgid "cannot get confidence intervals on var-cov components: %s"
msgstr ""

#. R/lme.R: gettextf("cannot get confidence intervals on var-cov components: %s\n Consider '%s'",     aV, "which = \"fixed\"")
#: R/lme.R:0
msgid ""
"cannot get confidence intervals on var-cov components: %s\n"
" Consider '%s'"
msgstr ""

#. R/pdMat.R: stop("cannot get the inverse of an uninitialized object")
#. R/pdMat.R: stop("cannot get the inverse of an uninitialized object")
#. R/pdMat.R: stop("cannot get the inverse of an uninitialized object")
#. R/pdMat.R: stop("cannot get the inverse of an uninitialized object")
#: R/pdMat.R:0
msgid "cannot get the inverse of an uninitialized object"
msgstr ""

#. R/pdMat.R: stop("cannot have duplicated column names in a \"pdMat\" object")
#. R/pdMat.R: stop("cannot have duplicated column names in a \"pdMat\" object")
#: R/pdMat.R:0
msgid "cannot have duplicated column names in a \"pdMat\" object"
msgstr ""

#. R/corStruct.R: stop("cannot have zero distances in \"corSpatial\"")
#: R/corStruct.R:0
msgid "cannot have zero distances in \"corSpatial\""
msgstr ""

#. R/pdMat.R: stop("cannot obtain constrained coefficients with uninitialized dimensions")
#: R/pdMat.R:0
msgid "cannot obtain constrained coefficients with uninitialized dimensions"
msgstr ""

#. R/newFunc.R: stop("cannot omit grouping factor without 'form'")
#: R/newFunc.R:0
msgid "cannot omit grouping factor without 'form'"
msgstr ""

#. R/nlsList.R: stop("cannot use an anonymous function for the model")
#: R/nlsList.R:0
msgid "cannot use an anonymous function for the model"
msgstr ""

#. R/nlme.R: warning("cannot use smaller level of grouping for \"correlation\" than for \"random\". Replacing the former with the latter.")
#: R/nlme.R:0
msgid "cannot use smaller level of grouping for \"correlation\" than for \"random\". Replacing the former with the latter."
msgstr ""

#. R/lme.R: warning("cannot use smaller level of grouping for 'correlation' than for 'random'. Replacing the former with the latter.")
#: R/lme.R:0
msgid "cannot use smaller level of grouping for 'correlation' than for 'random'. Replacing the former with the latter."
msgstr ""

#. R/groupedData.R: warning("collapsing level cannot be smaller than display level; setting it to the display level")
#: R/groupedData.R:0
msgid "collapsing level cannot be smaller than display level; setting it to the display level"
msgstr ""

#. R/gls.R: gettextf("computed \"gls\" fit is singular, rank %s", rnk)
#: R/gls.R:0
msgid "computed \"gls\" fit is singular, rank %s"
msgstr ""

#. R/varFunc.R: stop("constant in \"varConstProp\" structure must be > 0")
#. R/varFunc.R: stop("constant in \"varConstProp\" structure must be > 0")
#: R/varFunc.R:0
msgid "constant in \"varConstProp\" structure must be > 0"
msgstr ""

#. R/lmList.R: stop("covariate must be a data frame")
#. R/lme.R: stop("covariate must be a data frame")
#: R/lmList.R:0 R/lme.R:0
msgid "covariate must be a data frame"
msgstr "공변량은 반드시 데이터프레임이어야 합니다"

#. R/lmList.R: stop("covariate must be numeric")
#. R/newMethods.R: stop("covariate must be numeric")
#: R/lmList.R:0 R/newMethods.R:0
msgid "covariate must be numeric"
msgstr ""

#. R/lme.R: stop("covariate must have a level attribute when 'id' is a formula")
#: R/lme.R:0
msgid "covariate must have a level attribute when 'id' is a formula"
msgstr ""

#. R/lme.R: stop("covariate must have a level attribute when 'idLabels' is a formula")
#: R/lme.R:0
msgid "covariate must have a level attribute when 'idLabels' is a formula"
msgstr ""

#. R/lme.R: stop("covariate must have a level attribute when groups are present")
#: R/lme.R:0
msgid "covariate must have a level attribute when groups are present"
msgstr ""

#. R/corStruct.R: stop("covariate must have unique integer values within groups for \"corARMA\" objects")
#: R/corStruct.R:0
msgid "covariate must have unique integer values within groups for \"corARMA\" objects"
msgstr ""

#. R/corStruct.R: stop("covariate must have unique values within groups for \"corAR1\" objects")
#: R/corStruct.R:0
msgid "covariate must have unique values within groups for \"corAR1\" objects"
msgstr ""

#. R/corStruct.R: stop("covariate must have unique values within groups for \"corCAR1\" objects")
#: R/corStruct.R:0
msgid "covariate must have unique values within groups for \"corCAR1\" objects"
msgstr ""

#. R/corStruct.R: stop("covariate must have unique values within groups for \"corNatural\" objects")
#: R/corStruct.R:0
msgid "covariate must have unique values within groups for \"corNatural\" objects"
msgstr ""

#. R/corStruct.R: stop("covariate must have unique values within groups for \"corSymm\" objects")
#: R/corStruct.R:0
msgid "covariate must have unique values within groups for \"corSymm\" objects"
msgstr ""

#. R/newMethods.R: stop("data argument to \"data.frame\" method for 'getGroups' does not make sense")
#: R/newMethods.R:0
msgid "data argument to \"data.frame\" method for 'getGroups' does not make sense"
msgstr ""

#. R/gls.R: gettextf("data in %s call must evaluate to a data frame", sQuote(substitute(object)))
#. R/lme.R: gettextf("data in %s call must evaluate to a data frame", sQuote(substitute(object)))
#: R/gls.R:0 R/lme.R:0
msgid "data in %s call must evaluate to a data frame"
msgstr ""

#. R/simulate.R: stop("degrees of freedom and weights must have the same length")
#: R/simulate.R:0
msgid "degrees of freedom and weights must have the same length"
msgstr ""

#. R/zzMethods.R: warning("deviance undefined for REML fit")
#: R/zzMethods.R:0
msgid "deviance undefined for REML fit"
msgstr ""

#. R/pdMat.R: stop("dimnames of 'value' must match or be NULL")
#: R/pdMat.R:0
msgid "dimnames of 'value' must match or be NULL"
msgstr ""

#. R/corStruct.R: gettextf("do not know how to calculate correlation matrix of %s object",     dQuote(class(object)[1]))
#: R/corStruct.R:0
msgid "do not know how to calculate correlation matrix of %s object"
msgstr "%s 객체의 상관행렬을 어떻게 계산해야 할 지 알 수 없습니다"

#. R/varFunc.R: gettextf("do not know how to get coefficients for %s object",     dQuote(class(object)[1]))
#: R/varFunc.R:0
msgid "do not know how to get coefficients for %s object"
msgstr ""

#. R/pdMat.R: stop("do not know how to obtain constrained coefficients")
#: R/pdMat.R:0
msgid "do not know how to obtain constrained coefficients"
msgstr ""

#. R/corStruct.R: gettextf("do not know how to obtain parameters of %s object",     dQuote(class(object)[1]))
#: R/corStruct.R:0
msgid "do not know how to obtain parameters of %s object"
msgstr "%s 객체의 파라미터들을 어떻게 얻어야 할지 알 수 없습니다"

#. R/reStruct.R: stop("elements in 'object' must be formulas or \"pdMat\" objects")
#: R/reStruct.R:0
msgid "elements in 'object' must be formulas or \"pdMat\" objects"
msgstr ""

#. R/lme.R: gettextf("fewer observations than random effects in all level %s groups",     Q, domain = "R-nlme")
#. R/nlme.R: gettextf("fewer observations than random effects in all level %s groups",     Q)
#: R/lme.R:0 R/nlme.R:0
msgid "fewer observations than random effects in all level %s groups"
msgstr ""

#. R/groupedData.R: stop("first argument to 'groupedData' must be a two-sided formula")
#: R/groupedData.R:0
msgid "first argument to 'groupedData' must be a two-sided formula"
msgstr ""

#. R/groupedData.R: stop("first argument to 'nfGroupedData' must be a two-sided formula")
#: R/groupedData.R:0
msgid "first argument to 'nfGroupedData' must be a two-sided formula"
msgstr ""

#. R/groupedData.R: stop("first argument to 'nmGroupedData' must be a two-sided formula")
#: R/groupedData.R:0
msgid "first argument to 'nmGroupedData' must be a two-sided formula"
msgstr ""

#. R/lme.R: stop("first model has a different response from the rest")
#: R/lme.R:0
msgid "first model has a different response from the rest"
msgstr ""

#. R/lme.R: warning("fitted objects with different fixed effects. REML comparisons are not meaningful.")
#: R/lme.R:0
msgid "fitted objects with different fixed effects. REML comparisons are not meaningful."
msgstr ""

#. R/varFunc.R: stop("fixed parameter names in 'varIdent' must be a subset of group names")
#: R/varFunc.R:0
msgid "fixed parameter names in 'varIdent' must be a subset of group names"
msgstr ""

#. R/varFunc.R: stop("fixed parameters must have group names")
#. R/varFunc.R: stop("fixed parameters must have group names")
#. R/varFunc.R: stop("fixed parameters must have group names")
#. R/varFunc.R: stop("fixed parameters must have group names")
#: R/varFunc.R:0
msgid "fixed parameters must have group names"
msgstr ""

#. R/varFunc.R: stop("fixed parameters must have group names in 'varExp'")
#: R/varFunc.R:0
msgid "fixed parameters must have group names in 'varExp'"
msgstr ""

#. R/varFunc.R: stop("fixed parameters must have group names in 'varPower'")
#: R/varFunc.R:0
msgid "fixed parameters must have group names in 'varPower'"
msgstr ""

#. R/varFunc.R: stop("fixed parameters must have names in 'varIdent'")
#: R/varFunc.R:0
msgid "fixed parameters must have names in 'varIdent'"
msgstr ""

#. R/lme.R: stop("fixed-effects model must be a formula of the form \"resp ~ pred\"")
#. R/simulate.R: stop("\nfixed-effects model must be a formula of the form \"resp ~ pred\"")
#: R/lme.R:0 R/simulate.R:0
msgid "fixed-effects model must be a formula of the form \"resp ~ pred\""
msgstr ""

#. R/newFunc.R: stop("formula(object) must return a formula")
#: R/newFunc.R:0
msgid "formula(object) must return a formula"
msgstr ""

#. R/nlme.R: stop("formulae in 'fixed' must be of the form \"parameter ~ expr\"")
#. R/nlme.R: stop("formulae in 'fixed' must be of the form \"parameter ~ expr\"")
#: R/nlme.R:0
msgid "formulae in 'fixed' must be of the form \"parameter ~ expr\""
msgstr ""

#. R/gnls.R: stop("formulae in 'params' must be of the form \"parameter ~ expr\"")
#. R/gnls.R: stop("formulae in 'params' must be of the form \"parameter ~ expr\"")
#: R/gnls.R:0
msgid "formulae in 'params' must be of the form \"parameter ~ expr\""
msgstr ""

#. R/nlme.R: stop("formulae in 'random' must be of the form \"parameter ~ expr\"")
#. R/nlme.R: stop("formulae in 'random' must be of the form \"parameter ~ expr\"")
#: R/nlme.R:0
msgid "formulae in 'random' must be of the form \"parameter ~ expr\""
msgstr ""

#. R/nlme.R: gettextf("groups levels mismatch in 'random' and starting values for 'random' at level %s",     namGrp[i])
#: R/nlme.R:0
msgid "groups levels mismatch in 'random' and starting values for 'random' at level %s"
msgstr ""

#. R/varFunc.R: warning("ignoring 'group' in \"varFixed\" formula")
#: R/varFunc.R:0
msgid "ignoring 'group' in \"varFixed\" formula"
msgstr ""

#. R/pdMat.R: warning("ignoring argument 'form'")
#. R/pdMat.R: warning("ignoring argument 'form'")
#: R/pdMat.R:0
msgid "ignoring argument 'form'"
msgstr ""

#. R/pdMat.R: warning("ignoring argument 'nam'")
#: R/pdMat.R:0
msgid "ignoring argument 'nam'"
msgstr ""

#. R/varFunc.R: warning("ignoring initial values (no grouping factor)")
#: R/varFunc.R:0
msgid "ignoring initial values (no grouping factor)"
msgstr ""

#. R/nlme.R: stop("incompatible formulas for groups in \"random\" and \"correlation\"")
#. R/nlme.R: stop("incompatible formulas for groups in \"random\" and \"correlation\"")
#: R/nlme.R:0
msgid "incompatible formulas for groups in \"random\" and \"correlation\""
msgstr ""

#. R/lme.R: stop("incompatible formulas for groups in 'random' and 'correlation'")
#. R/lme.R: stop("incompatible formulas for groups in 'random' and 'correlation'")
#: R/lme.R:0
msgid "incompatible formulas for groups in 'random' and 'correlation'"
msgstr ""

#. R/lme.R: stop("incompatible lengths for 'random' and grouping factors")
#. R/nlme.R: stop("incompatible lengths for 'random' and grouping factors")
#. R/simulate.R: stop("incompatible lengths for 'random' and grouping factors")
#: R/lme.R:0 R/nlme.R:0 R/simulate.R:0
msgid "incompatible lengths for 'random' and grouping factors"
msgstr ""

#. R/reStruct.R: stop("incompatible lengths for object names")
#: R/reStruct.R:0
msgid "incompatible lengths for object names"
msgstr ""

#. R/VarCov.R: gettextf("individual %s was not used in the fit", sQuote(individ))
#. R/VarCov.R: gettextf("individual %s was not used in the fit", sQuote(individual))
#: R/VarCov.R:0
msgid "individual %s was not used in the fit"
msgstr ""

#. R/corStruct.R: stop("initial value for \"corLin\" parameters of wrong dimension")
#. R/corStruct.R: stop("initial value for \"corLin\" parameters of wrong dimension")
#: R/corStruct.R:0
msgid "initial value for \"corLin\" parameters of wrong dimension"
msgstr ""

#. R/corStruct.R: stop("initial value for \"corNatural\" parameters of wrong dimension")
#: R/corStruct.R:0
msgid "initial value for \"corNatural\" parameters of wrong dimension"
msgstr ""

#. R/corStruct.R: stop("initial value for \"corSpatial\" parameters of wrong dimension")
#. R/corStruct.R: stop("initial value for \"corSpatial\" parameters of wrong dimension")
#: R/corStruct.R:0
msgid "initial value for \"corSpatial\" parameters of wrong dimension"
msgstr ""

#. R/corStruct.R: stop("initial value for \"corSpher\" parameters of wrong dimension")
#. R/corStruct.R: stop("initial value for \"corSpher\" parameters of wrong dimension")
#: R/corStruct.R:0
msgid "initial value for \"corSpher\" parameters of wrong dimension"
msgstr ""

#. R/corStruct.R: stop("initial value for \"corSymm\" parameters of wrong dimension")
#: R/corStruct.R:0
msgid "initial value for \"corSymm\" parameters of wrong dimension"
msgstr ""

#. R/lme.R: warning("initial value for \"reStruct\" overwritten in 'lme.lmList'")
#: R/lme.R:0
msgid "initial value for \"reStruct\" overwritten in 'lme.lmList'"
msgstr ""

#. R/varFunc.R: gettextf("initial value for \"varExp\" should be of length %d",     nStratVar)
#: R/varFunc.R:0
msgid "initial value for \"varExp\" should be of length %d"
msgstr ""

#. R/varFunc.R: stop("initial value for \"varExp\" should be of length 1")
#: R/varFunc.R:0
msgid "initial value for \"varExp\" should be of length 1"
msgstr ""

#. R/varFunc.R: gettextf("initial value for \"varIdent\" should be of length %d",     len)
#: R/varFunc.R:0
msgid "initial value for \"varIdent\" should be of length %d"
msgstr ""

#. R/varFunc.R: gettextf("initial value for \"varPower\" should be of length %d",     nStratVar)
#: R/varFunc.R:0
msgid "initial value for \"varPower\" should be of length %d"
msgstr ""

#. R/varFunc.R: stop("initial value for \"varPower\" should be of length 1")
#: R/varFunc.R:0
msgid "initial value for \"varPower\" should be of length 1"
msgstr ""

#. R/corStruct.R: warning("initial value for 'range' less than minimum distance. Setting it to 1.1 * min(distance)")
#. R/corStruct.R: warning("initial value for 'range' less than minimum distance. Setting it to 1.1 * min(distance)")
#: R/corStruct.R:0
msgid "initial value for 'range' less than minimum distance. Setting it to 1.1 * min(distance)"
msgstr ""

#. R/nlme.R: warning("initial value for 'reStruct' overwritten in 'nlme.nlsList'")
#: R/nlme.R:0
msgid "initial value for 'reStruct' overwritten in 'nlme.nlsList'"
msgstr ""

#. R/corStruct.R: stop("initial value for parameter of wrong length")
#: R/corStruct.R:0
msgid "initial value for parameter of wrong length"
msgstr ""

#. R/corStruct.R: gettextf("initial value in \"corCompSymm\" must be greater than %s",     attr(object, "inf"))
#: R/corStruct.R:0
msgid "initial value in \"corCompSymm\" must be greater than %s"
msgstr "\"corCompSymm\" 내의 초기값은 반드시 %s 보다 커야 합니다"

#. R/corStruct.R: stop("initial value of nugget ratio must be between 0 and 1")
#. R/corStruct.R: stop("initial value of nugget ratio must be between 0 and 1")
#. R/corStruct.R: stop("initial value of nugget ratio must be between 0 and 1")
#: R/corStruct.R:0
msgid "initial value of nugget ratio must be between 0 and 1"
msgstr "nugget ratio의 초기값은 반드시 0과 1 사이에 있어야 합니다"

#. R/varFunc.R: gettext("initial value should be of length %d", nStratVar)
#. R/varFunc.R: gettext("initial value should be of length %d", aux)
#. R/varFunc.R: gettext("initial value should be of length %d", nStratVar)
#. R/varFunc.R: gettext("initial value should be of length %d", aux)
#: R/varFunc.R:0
msgid "initial value should be of length %d"
msgstr ""

#. R/corStruct.R: stop("initial values for \"corNatural\" do not define a positive-definite correlation structure")
#: R/corStruct.R:0
msgid "initial values for \"corNatural\" do not define a positive-definite correlation structure"
msgstr ""

#. R/corStruct.R: stop("initial values for \"corNatural\" must be between -1 and 1")
#: R/corStruct.R:0
msgid "initial values for \"corNatural\" must be between -1 and 1"
msgstr ""

#. R/corStruct.R: stop("initial values for \"corSymm\" do not define a positive-definite correlation structure")
#: R/corStruct.R:0
msgid "initial values for \"corSymm\" do not define a positive-definite correlation structure"
msgstr ""

#. R/corStruct.R: stop("initial values for \"corSymm\" must be between -1 and 1")
#: R/corStruct.R:0
msgid "initial values for \"corSymm\" must be between -1 and 1"
msgstr ""

#. R/varFunc.R: stop("initial values for 'varIdent' must be > 0")
#: R/varFunc.R:0
msgid "initial values for 'varIdent' must be > 0"
msgstr ""

#. R/varFunc.R: stop("initial values must have group names in 'varExp'")
#: R/varFunc.R:0
msgid "initial values must have group names in 'varExp'"
msgstr ""

#. R/varFunc.R: stop("initial values must have group names in 'varIdent'")
#: R/varFunc.R:0
msgid "initial values must have group names in 'varIdent'"
msgstr ""

#. R/varFunc.R: stop("initial values must have group names in 'varPower'")
#: R/varFunc.R:0
msgid "initial values must have group names in 'varPower'"
msgstr ""

#. R/pdMat.R: warning("initializing \"pdCompSymm\" object is not positive definite")
#: R/pdMat.R:0
msgid "initializing \"pdCompSymm\" object is not positive definite"
msgstr ""

#. R/newMethods.R: stop("invalid formula for groups")
#: R/newMethods.R:0
msgid "invalid formula for groups"
msgstr ""

#. R/pdMat.R: stop("length of 'nam' not consistent with dimensions of initial value")
#: R/pdMat.R:0
msgid "length of 'nam' not consistent with dimensions of initial value"
msgstr ""

#. R/newMethods.R: gettextf("level of %s does not match formula %s", level[aux],     sQuote(deparse(form)))
#. R/newMethods.R: gettextf("level of %s does not match formula %s", level[aux],     sQuote(deparse(form)))
#: R/newMethods.R:0
msgid "level of %s does not match formula %s"
msgstr ""

#. R/nlme.R: gettextf("list with starting values for random effects must have names or be of length %d",     Q)
#: R/nlme.R:0
msgid "list with starting values for random effects must have names or be of length %d"
msgstr ""

#. R/lmList.R: stop("log-likelihood not available with NULL fits")
#: R/lmList.R:0
msgid "log-likelihood not available with NULL fits"
msgstr ""

#. R/lme.R: gettext("maximum number of iterations (lmeControl(maxIter)) reached without convergence",     domain = "R-nlme")
#: R/lme.R:0
#, fuzzy
msgid "maximum number of iterations (lmeControl(maxIter)) reached without convergence"
msgstr "수렴하지 않고 지정된 최대 반복수에 도달하였습니다"

#. R/nlme.R: gettextf("maximum number of iterations (maxIter = %d) reached without convergence",     controlvals$maxIter, domain = "R-nlme")
#: R/nlme.R:0
#, fuzzy
msgid "maximum number of iterations (maxIter = %d) reached without convergence"
msgstr "수렴하지 않고 지정된 최대 반복수에 도달하였습니다"

#. R/gls.R: stop("maximum number of iterations reached without convergence")
#: R/gls.R:0
msgid "maximum number of iterations reached without convergence"
msgstr "수렴하지 않고 지정된 최대 반복수에 도달하였습니다"

#. R/varFunc.R: stop("mismatch between group names and fixed values names")
#. R/varFunc.R: stop("mismatch between group names and fixed values names")
#. R/varFunc.R: stop("mismatch between group names and fixed values names")
#. R/varFunc.R: stop("mismatch between group names and fixed values names")
#: R/varFunc.R:0
msgid "mismatch between group names and fixed values names"
msgstr ""

#. R/nlsList.R: stop("missing call attribute in \"nlsList\" object")
#: R/nlsList.R:0
msgid "missing call attribute in \"nlsList\" object"
msgstr ""

#. R/nlme.R: stop("model formula must be of the form \"resp ~ pred\"")
#: R/nlme.R:0
msgid "model formula must be of the form \"resp ~ pred\""
msgstr ""

#. R/gls.R: stop("model must be a formula of the form \"resp ~ pred\"")
#: R/gls.R:0
msgid "model must be a formula of the form \"resp ~ pred\""
msgstr ""

#. R/simulate.R: stop("models with \"corStruct\" and/or \"varFunc\" objects not allowed")
#. R/simulate.R: stop("models with \"corStruct\" and/or \"varFunc\" objects not allowed")
#: R/simulate.R:0
msgid "models with \"corStruct\" and/or \"varFunc\" objects not allowed"
msgstr ""

#. R/simulate.R: stop("more than one degree of freedom is needed when one them is zero.")
#: R/simulate.R:0
msgid "more than one degree of freedom is needed when one them is zero."
msgstr ""

#. R/corStruct.R: stop("moving average order must be a non-negative integer")
#: R/corStruct.R:0
msgid "moving average order must be a non-negative integer"
msgstr ""

#. R/lmList.R: stop("multiple levels not allowed")
#. R/lmList.R: stop("multiple levels not allowed")
#. R/nlsList.R: stop("multiple levels not allowed")
#: R/lmList.R:0 R/nlsList.R:0
msgid "multiple levels not allowed"
msgstr ""

#. R/pdMat.R: stop("must give names when initializing \"pdCompSymm\" from parameter without a formula")
#: R/pdMat.R:0
msgid "must give names when initializing \"pdCompSymm\" from parameter without a formula"
msgstr ""

#. R/pdMat.R: stop("must give names when initializing \"pdIdent\" from parameter without a formula")
#: R/pdMat.R:0
msgid "must give names when initializing \"pdIdent\" from parameter without a formula"
msgstr ""

#. R/pdMat.R: stop("must give names when initializing from matrix or parameter")
#: R/pdMat.R:0
msgid "must give names when initializing from matrix or parameter"
msgstr ""

#. R/pdMat.R: stop("must have formula when no names are given")
#: R/pdMat.R:0
msgid "must have formula when no names are given"
msgstr ""

#. R/pdMat.R: stop("names being assigned do not correspond to a permutation of previous names")
#: R/pdMat.R:0
msgid "names being assigned do not correspond to a permutation of previous names"
msgstr ""

#. R/nlme.R: gettextf("names mismatch in 'random' and starting values  for 'random' at level %s",     namGrp[i])
#: R/nlme.R:0
msgid "names mismatch in 'random' and starting values  for 'random' at level %s"
msgstr ""

#. R/pdMat.R: stop("names of 'value' are not consistent with 'nam' argument")
#: R/pdMat.R:0
msgid "names of 'value' are not consistent with 'nam' argument"
msgstr ""

#. R/pdMat.R: stop("names of object and value must match")
#: R/pdMat.R:0
msgid "names of object and value must match"
msgstr ""

#. R/varFunc.R: stop("names of starting value for \"varIdent\" object must contain all but one of the stratum levels")
#: R/varFunc.R:0
msgid "names of starting value for \"varIdent\" object must contain all but one of the stratum levels"
msgstr ""

#. R/gls.R: stop("need an object with call component")
#. R/gnls.R: stop("need an object with call component")
#. R/lmList.R: stop("need an object with call component")
#. R/lme.R: stop("need an object with call component")
#. R/nlme.R: stop("need an object with call component")
#: R/gls.R:0 R/gnls.R:0 R/lmList.R:0 R/lme.R:0 R/nlme.R:0
msgid "need an object with call component"
msgstr ""

#. R/corStruct.R: stop("need data to calculate covariate")
#: R/corStruct.R:0
msgid "need data to calculate covariate"
msgstr "공변량을 계산할 데이터가 필요합니다"

#. R/corStruct.R: stop("need data to calculate covariate of \"corStruct\" object")
#: R/corStruct.R:0
msgid "need data to calculate covariate of \"corStruct\" object"
msgstr "\"corStruct\" 객체의 공변량을 계산하기 위한 데이터가 필요합니다"

#. R/simulate.R: stop("negative degrees of freedom not allowed")
#: R/simulate.R:0
msgid "negative degrees of freedom not allowed"
msgstr ""

#. R/gls.R: stop("no coefficients to fit")
#: R/gls.R:0
msgid "no coefficients to fit"
msgstr "적합할 계수가 없습니다"

#. R/lme.R: stop("no condensed linear model")
#: R/lme.R:0
msgid "no condensed linear model"
msgstr ""

#. R/pdMat.R: stop("no default method for extracting the square root of a \"pdMat\" object")
#: R/pdMat.R:0
msgid "no default method for extracting the square root of a \"pdMat\" object"
msgstr ""

#. R/newFunc.R: stop("no degrees of freedom for estimating std. dev.")
#: R/newFunc.R:0
msgid "no degrees of freedom for estimating std. dev."
msgstr ""

#. R/simulate.R: stop("no degrees of freedom specified")
#: R/simulate.R:0
msgid "no degrees of freedom specified"
msgstr ""

#. R/lme.R: stop("no effects allowed in right side of formula")
#: R/lme.R:0
msgid "no effects allowed in right side of formula"
msgstr ""

#. R/lme.R: stop("no fitted \"lme\" object")
#: R/lme.R:0
msgid "no fitted \"lme\" object"
msgstr "적합된 \"lme\" 객체가 없습니다"

#. R/gnls.R: stop("no initial values for model parameters")
#: R/gnls.R:0
msgid "no initial values for model parameters"
msgstr ""

#. R/newMethods.R: stop("no model variogram available with 'showModel = TRUE'")
#: R/newMethods.R:0
msgid "no model variogram available with 'showModel = TRUE'"
msgstr ""

#. R/lmList.R: stop("nonexistent group in 'newdata'")
#: R/lmList.R:0
msgid "nonexistent group in 'newdata'"
msgstr ""

#. R/varFunc.R: stop("nonexistent group names for initial values")
#. R/varFunc.R: stop("nonexistent group names for initial values")
#: R/varFunc.R:0
msgid "nonexistent group names for initial values"
msgstr ""

#. R/varFunc.R: stop("nonexistent group names for initial values in \"varExp\"")
#: R/varFunc.R:0
msgid "nonexistent group names for initial values in \"varExp\""
msgstr ""

#. R/varFunc.R: stop("nonexistent group names for initial values in \"varPower\"")
#: R/varFunc.R:0
msgid "nonexistent group names for initial values in \"varPower\""
msgstr ""

#. R/varFunc.R: stop("nonexistent group names for initial values in 'varIdent'")
#: R/varFunc.R:0
msgid "nonexistent group names for initial values in 'varIdent'"
msgstr ""

#. R/lmList.R: stop("nonexistent group requested in 'subset'")
#: R/lmList.R:0
msgid "nonexistent group requested in 'subset'"
msgstr ""

#. R/lmList.R: stop("nonexistent groups requested in 'subset'")
#. R/lmList.R: stop("nonexistent groups requested in 'subset'")
#. R/lmList.R: stop("nonexistent groups requested in 'subset'")
#. R/lmList.R: stop("nonexistent groups requested in 'subset'")
#: R/lmList.R:0
msgid "nonexistent groups requested in 'subset'"
msgstr ""

#. R/zzMethods.R: stop("not (yet) implemented.  Contributions are welcome; use intervals() instead (for now)")
#: R/zzMethods.R:0
msgid "not (yet) implemented.  Contributions are welcome; use intervals() instead (for now)"
msgstr ""

#. R/VarCov.R: stop("not implemented for \"nlme\" objects")
#: R/VarCov.R:0
msgid "not implemented for \"nlme\" objects"
msgstr "\"nlme\" 객체들에 대하여 구현되지 않았습니다"

#. R/VarCov.R: stop("not implemented for correlation structures without a grouping factor")
#: R/VarCov.R:0
msgid "not implemented for correlation structures without a grouping factor"
msgstr ""

#. R/VarCov.R: stop("not implemented for multiple levels of nesting")
#: R/VarCov.R:0
msgid "not implemented for multiple levels of nesting"
msgstr ""

#. R/VarCov.R: stop("not implemented for uncorrelated errors")
#: R/VarCov.R:0
#, fuzzy
msgid "not implemented for uncorrelated errors"
msgstr "\"nlme\" 객체들에 대하여 구현되지 않았습니다"

#. R/nlme.R: gettextf("number of columns in starting values for random component at level %s should be %d",     namGrp[i], rlength[i])
#: R/nlme.R:0
msgid "number of columns in starting values for random component at level %s should be %d"
msgstr ""

#. R/nlme.R: gettextf("number of rows in starting values for random component at level %s should be %d",     namGrp[i], Dims$ngrps[i])
#: R/nlme.R:0
msgid "number of rows in starting values for random component at level %s should be %d"
msgstr ""

#. R/gnls.R: stop("object formula must be of the form \"resp ~ pred\"")
#: R/gnls.R:0
msgid "object formula must be of the form \"resp ~ pred\""
msgstr ""

#. R/gls.R: gettextf("object must inherit from class %s", "\"gls\"")
#. R/lme.R: gettextf("object must inherit from class %s", "\"lme\"")
#. R/newFunc.R: gettextf("object must inherit from class %s", "\"data.frame\"")
#. R/newFunc.R: gettextf("object must inherit from class %s", "\"data.frame\"")
#. R/newFunc.R: gettextf("object must inherit from class %s", "\"lmList\"")
#: R/gls.R:0 R/lme.R:0 R/newFunc.R:0
#, fuzzy
msgid "object must inherit from class %s"
msgstr "'object'는 반드시 formula이어야 합니다"

#. R/lme.R: stop("objects must have a \"call\" component or attribute")
#: R/lme.R:0
msgid "objects must have a \"call\" component or attribute"
msgstr ""

#. R/newFunc.R: stop("objects must have coefficients with same row names")
#: R/newFunc.R:0
msgid "objects must have coefficients with same row names"
msgstr ""

#. R/lme.R: gettextf("objects must inherit from classes %s, or %s", paste(head(valid.cl,     -1), collapse = ", "), tail(valid.cl, 1))
#: R/lme.R:0
msgid "objects must inherit from classes %s, or %s"
msgstr ""

#. R/gls.R: stop("offset() terms are not supported")
#. R/lme.R: stop("offset() terms are not supported")
#: R/gls.R:0 R/lme.R:0
msgid "offset() terms are not supported"
msgstr ""

#. R/nlsList.R: stop("old-style self-starting model functions\nare no longer supported.\nNew selfStart functions are available.\nUse\n  SSfpl instead of fpl,\n  SSfol instead of first.order.log,\n  SSbiexp instead of biexp,\n  SSlogis instead of logistic.\nIf writing your own selfStart model, see\n  \"help(selfStart)\"\nfor the new form of the \"initial\" attribute.")
#: R/nlsList.R:0
msgid ""
"old-style self-starting model functions\n"
"are no longer supported.\n"
"New selfStart functions are available.\n"
"Use\n"
"  SSfpl instead of fpl,\n"
"  SSfol instead of first.order.log,\n"
"  SSbiexp instead of biexp,\n"
"  SSlogis instead of logistic.\n"
"If writing your own selfStart model, see\n"
"  \"help(selfStart)\"\n"
"for the new form of the \"initial\" attribute."
msgstr ""

#. R/groupedData.R: stop("only one display level allowed")
#: R/groupedData.R:0
msgid "only one display level allowed"
msgstr ""

#. R/gls.R: stop("only one level allowed for predictions")
#: R/gls.R:0
msgid "only one level allowed for predictions"
msgstr ""

#. R/newFunc.R: stop("only one level allowed in 'gapply'")
#: R/newFunc.R:0
msgid "only one level allowed in 'gapply'"
msgstr ""

#. R/newFunc.R: stop("only one level allowed in 'gsummary'")
#: R/newFunc.R:0
msgid "only one level allowed in 'gsummary'"
msgstr ""

#. R/groupedData.R: stop("only one level of grouping allowed")
#: R/groupedData.R:0
msgid "only one level of grouping allowed"
msgstr ""

#. R/newMethods.R: stop("only residuals allowed")
#: R/newMethods.R:0
msgid "only residuals allowed"
msgstr ""

#. R/lmList.R: stop("only residuals and random effects allowed")
#. R/lme.R: stop("only residuals and random effects allowed")
#: R/lmList.R:0 R/lme.R:0
msgid "only residuals and random effects allowed"
msgstr ""

#. R/lme.R: stop("only single effects allowed in left side of 'form'")
#: R/lme.R:0
msgid "only single effects allowed in left side of 'form'"
msgstr ""

#. R/lme.R: stop("only single level allowed")
#. R/lme.R: stop("only single level allowed")
#: R/lme.R:0
msgid "only single level allowed"
msgstr ""

#. R/simulate.R: stop("order of arguments in 'simulate.lme' has changed to conform with generic in R-2.2.0",     domain = "R-nlme")
#: R/simulate.R:0
msgid "order of arguments in 'simulate.lme' has changed to conform with generic in R-2.2.0"
msgstr ""

#. R/corStruct.R: stop("parameter in \"corCompSymm\" structure must be < 1 in absolute value")
#: R/corStruct.R:0
msgid "parameter in \"corCompSymm\" structure must be < 1 in absolute value"
msgstr ""

#. R/corStruct.R: stop("parameter in AR(1) structure must be between -1 and 1")
#: R/corStruct.R:0
msgid "parameter in AR(1) structure must be between -1 and 1"
msgstr ""

#. R/corStruct.R: stop("parameter in CAR(1) structure must be between 0 and 1")
#: R/corStruct.R:0
msgid "parameter in CAR(1) structure must be between 0 and 1"
msgstr ""

#. R/corStruct.R: stop("parameters in ARMA structure must be < 1 in absolute value")
#: R/corStruct.R:0
msgid "parameters in ARMA structure must be < 1 in absolute value"
msgstr ""

#. R/simulate.R: stop("plot method only implemented for comparing models")
#. R/simulate.R: stop("plot method only implemented for comparing models")
#: R/simulate.R:0
msgid "plot method only implemented for comparing models"
msgstr ""

#. R/corStruct.R: stop("range must be > 0 in \"corSpher\" initial value")
#: R/corStruct.R:0
msgid "range must be > 0 in \"corSpher\" initial value"
msgstr ""

#. R/groupedData.R: stop("right-hand side of first argument must be a conditional expression")
#. R/groupedData.R: stop("right-hand side of first argument must be a conditional expression")
#. R/groupedData.R: stop("right-hand side of first argument must be a conditional expression")
#: R/groupedData.R:0
msgid "right-hand side of first argument must be a conditional expression"
msgstr ""

#. R/nlsList.R: stop("second argument must be a groupedData object")
#: R/nlsList.R:0
msgid "second argument must be a groupedData object"
msgstr ""

#. R/groupedData.R: stop("second argument to 'groupedData' must inherit from data.frame")
#. R/groupedData.R: stop("second argument to 'groupedData' must inherit from data.frame")
#: R/groupedData.R:0
msgid "second argument to 'groupedData' must inherit from data.frame"
msgstr ""

#. R/groupedData.R: stop("single group not supported -- use groupedData()")
#: R/groupedData.R:0
msgid "single group not supported -- use groupedData()"
msgstr ""

#. R/lme.R: warning("some fitted objects deleted because response differs from the first model")
#: R/lme.R:0
msgid "some fitted objects deleted because response differs from the first model"
msgstr ""

#. R/gnls.R: stop("starting estimates must have names when 'params' is missing")
#: R/gnls.R:0
msgid "starting estimates must have names when 'params' is missing"
msgstr ""

#. R/nlme.R: stop("starting values for random effects must include group levels")
#: R/nlme.R:0
msgid "starting values for random effects must include group levels"
msgstr ""

#. R/nlme.R: stop("starting values for random effects should be a list, or a matrix")
#: R/nlme.R:0
msgid "starting values for random effects should be a list, or a matrix"
msgstr ""

#. R/nlme.R: stop("starting values for the 'fixed' component are not the correct length")
#: R/nlme.R:0
msgid "starting values for the 'fixed' component are not the correct length"
msgstr ""

#. R/nlme.R: stop("starting values for the random components should be a list of matrices")
#: R/nlme.R:0
msgid "starting values for the random components should be a list of matrices"
msgstr ""

#. R/gnls.R: gettext("step halving factor reduced below minimum in NLS step")
#: R/gnls.R:0
msgid "step halving factor reduced below minimum in NLS step"
msgstr ""

#. R/nlme.R: gettext("step halving factor reduced below minimum in PNLS step")
#: R/nlme.R:0
msgid "step halving factor reduced below minimum in PNLS step"
msgstr ""

#. R/gls.R: stop("terms can only be integers or characters")
#. R/lme.R: stop("terms can only be integers or characters")
#: R/gls.R:0 R/lme.R:0
msgid "terms can only be integers or characters"
msgstr ""

#. R/lme.R: stop("terms must all have the same denominator DF")
#: R/lme.R:0
msgid "terms must all have the same denominator DF"
msgstr ""

#. R/groupedData.R: gettextf("undefined collapsing level %s for %s", collapseLevel,     sQuote(substitute(object)))
#: R/groupedData.R:0
msgid "undefined collapsing level %s for %s"
msgstr ""

#. R/groupedData.R: gettextf("undefined display level %s for %s", displayLevel, sQuote(substitute(object)))
#: R/groupedData.R:0
msgid "undefined display level %s for %s"
msgstr ""

#. R/groupedData.R: stop("undefined group declared in 'subset'")
#: R/groupedData.R:0
msgid "undefined group declared in 'subset'"
msgstr ""

#. R/corStruct.R: stop("unique values of the covariate  for \"corSymm\" objects must be a sequence of consecutive integers")
#: R/corStruct.R:0
msgid "unique values of the covariate  for \"corSymm\" objects must be a sequence of consecutive integers"
msgstr ""

#. R/corStruct.R: stop("unique values of the covariate for \"corNatural\" objects must be a sequence of consecutive integers")
#: R/corStruct.R:0
msgid "unique values of the covariate for \"corNatural\" objects must be a sequence of consecutive integers"
msgstr ""

#. R/gls.R: stop("wrong group levels")
#. R/gls.R: stop("wrong group levels")
#: R/gls.R:0
msgid "wrong group levels"
msgstr ""

#. R/pdMat.R: stop("x-y data to splom got botched somehow")
#: R/pdMat.R:0
msgid "x-y data to splom got botched somehow"
msgstr ""

#. R/lme.R: ngettext(sum(whichNA), "%s not available for plotting", "%s not available for plotting",     domain = "R-nlme")
#. R/lme.R: ngettext(sum(whichNA), "%s not available for plotting", "%s not available for plotting",     domain = "R-nlme")
#: R/lme.R:0
msgid "%s not available for plotting"
msgid_plural "%s not available for plotting"
msgstr[0] ""
msgstr[1] ""

#. R/lmList.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/lmList.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/lmList.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/lme.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/lme.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/newMethods.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#. R/newMethods.R: ngettext(sum(naV), "%s not found in data", "%s not found in data")
#: R/lmList.R:0 R/lme.R:0 R/newMethods.R:0
msgid "%s not found in data"
msgid_plural "%s not found in data"
msgstr[0] "데이터로부터 %s를 찾을 수 없습니다"

#. R/newFunc.R: ngettext(sum(wchNot), "%s not matched", "%s not matched", domain = "R-nlme")
#: R/newFunc.R:0
msgid "%s not matched"
msgid_plural "%s not matched"
msgstr[0] ""
msgstr[1] ""

#. R/gls.R: ngettext(ncol(L), "'L' must have at most %d column", "'L' must have at most %d columns")
#. R/lme.R: ngettext(nX, "'L' must have at most %d column", "'L' must have at most %d columns")
#: R/gls.R:0 R/lme.R:0
msgid "'L' must have at most %d column"
msgid_plural "'L' must have at most %d columns"
msgstr[0] ""
msgstr[1] ""

#. R/gls.R: ngettext(sum(noMatch), "effect %s not matched", "effects %s not matched",     domain = "R-nlme")
#. R/lme.R: ngettext(sum(noMatch), "effect %s not matched", "effects %s not matched",     domain = "R-nlme")
#: R/gls.R:0 R/lme.R:0
msgid "effect %s not matched"
msgid_plural "effects %s not matched"
msgstr[0] ""
msgstr[1] ""

#. R/nlme.R: ngettext(sum(noMatch), "group name not matched in starting values for random effects: %s",     "group names not matched in starting values for random effects: %s",     domain = "R-nlme")
#: R/nlme.R:0
msgid "group name not matched in starting values for random effects: %s"
msgid_plural "group names not matched in starting values for random effects: %s"
msgstr[0] ""
msgstr[1] ""

#. R/lme.R: ngettext(sum(aux), "nonexistent level %s", "nonexistent levels %s")
#. R/lme.R: ngettext(sum(aux), "nonexistent level %s", "nonexistent levels %s")
#: R/lme.R:0
msgid "nonexistent level %s"
msgid_plural "nonexistent levels %s"
msgstr[0] ""
msgstr[1] ""

#. R/gnls.R: ngettext(length(start), "supplied %d starting value, need %d",     "supplied %d starting values, need %d")
#: R/gnls.R:0
msgid "supplied %d starting value, need %d"
msgid_plural "supplied %d starting values, need %d"
msgstr[0] ""

#. R/gls.R: ngettext(sum(noMatch), "term %s not matched", "terms %s not matched",     domain = "R-nlme")
#. R/lme.R: ngettext(sum(noMatch), "term %s not matched", "terms %s not matched",     domain = "R-nlme")
#: R/gls.R:0 R/lme.R:0
msgid "term %s not matched"
msgid_plural "terms %s not matched"
msgstr[0] ""
msgstr[1] ""

#~ msgid "starting values for parameters are not of the correct length"
#~ msgstr "파라미터들에 대한 시작값들에 대한 길이가 올바르지 않습니다"
